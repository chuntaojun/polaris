name: Standalone

on:
  workflow_dispatch:
    inputs:
      server_version:
        description: "tag version for polaris"
        required: true
      console_version:
        description: "tag version for polaris-console"
        required: true
      limiter_version:
        description: "tag version for polaris-limiter"
        required: true

jobs:
  release:
    name: Release polaris standalone
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows, darwin, kubernetes]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
          - goos: kubernetes
            goarch: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.server_version }}

      - name: Build
        id: build
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          SERVER_VERSION: ${{ github.event.inputs.server_version }}
          CONSOLE_VERSION: ${{ github.event.inputs.console_version }}
          LIMITER_VERSION: ${{ github.event.inputs.limiter_version }}
        run: |
          if [ ${GOOS} == "kubernetes" ];then
            set -e
            workdir=$(pwd)

            # ---------------------- 出简单 kubernetes 安装包 ---------------------- 
            cd ${workdir}
            cd deploy/standalone

            sed -i "s/##POLARIS_SERVER_VERSION##/${SERVER_VERSION}/g" k8s/03-polaris-server.yaml
            sed -i "s/##POLARIS_CONSOLE_VERSION##/${CONSOLE_VERSION}/g" k8s/03-polaris-server.yaml
            sed -i "s/##POLARIS_PROMETHEUS_VERSION##/${SERVER_VERSION}/g" k8s/04-prometheus.yaml

            cd ${cur}

            DIR_NAME=polaris-standalone-release_${SERVER_VERSION}.${GOOS}
            mkdir ${DIR_NAME}
            pushd ${DIR_NAME}
            cp ../k8s/* ./
            popd

            PACKAGE_NAME=${DIR_NAME}.zip
            zip -r ${PACKAGE_NAME} ${DIR_NAME}
            mv ${PACKAGE_NAME} ../../

            # ---------------------- 出 docker-compose 安装包 ---------------------- 
            cd ${workdir}
            cd deploy/standalone

            sed -i "s/##POLARIS_SERVER_VERSION##/${SERVER_VERSION}/g" docker-compose/docker-compose.yaml
            sed -i "s/##POLARIS_CONSOLE_VERSION##/${CONSOLE_VERSION}/g" docker-compose/docker-compose.yaml
            sed -i "s/##POLARIS_PROMETHEUS_VERSION##/${SERVER_VERSION}/g" docker-compose/docker-compose.yaml

            DOCKER_COMPOSE_DIR_NAME=polaris-standalone-release_${SERVER_VERSION}.docker-compose
            mkdir ${DOCKER_COMPOSE_DIR_NAME}
            pushd ${DOCKER_COMPOSE_DIR_NAME}
            cp ../docker-compose/* ./
            popd

            DOCKER_COMPOSE_PACKAGE_NAME=${DOCKER_COMPOSE_DIR_NAME}.zip
            zip -r ${DOCKER_COMPOSE_PACKAGE_NAME} ${DOCKER_COMPOSE_DIR_NAME}
            mv ${DOCKER_COMPOSE_PACKAGE_NAME} ../../

            # ---------------------- 出 helm 安装包 ---------------------- 
            cd ${workdir}
            cd deploy

            sed -i "s/##POLARIS_SERVER_VERSION##/${SERVER_VERSION}/g" helm/values.yaml
            sed -i "s/##POLARIS_CONSOLE_VERSION##/${CONSOLE_VERSION}/g" helm/values.yaml
            sed -i "s/##POLARIS_PROMETHEUS_VERSION##/${SERVER_VERSION}/g" helm/values.yaml

            HELM_DIR_NAME=polaris-helm-release_${SERVER_VERSION}.${GOOS}
            mkdir ${HELM_DIR_NAME}
            pushd ${HELM_DIR_NAME}
            cp ../helm/* ./

            HELM_PACKAGE_NAME=${HELM_DIR_NAME}.zip
            zip -r ${HELM_PACKAGE_NAME} ${HELM_DIR_NAME}
            mv ${HELM_PACKAGE_NAME} ../../

            ALL_ZIP_PKG="polaris*.zip"
            echo ::set-output name=name::${ALL_ZIP_PKG}
            return
          else
            set -e
            cd deploy/standalone
            POLARIS_GIT_PATH=https://github.com/polarismesh
            DIR_NAME=polaris-standalone-release_${SERVER_VERSION}.${GOOS}.${GOARCH}
            mkdir ${DIR_NAME}
            pushd ${DIR_NAME}
            SERVER_PKG_NAME=polaris-server-release_${SERVER_VERSION}.${GOOS}.${GOARCH}.zip
            wget -T10 -t3 ${POLARIS_GIT_PATH}/polaris/releases/download/${SERVER_VERSION}/${SERVER_PKG_NAME} --no-check-certificate
            CONSOLE_PKG_NAME=polaris-console-release_${CONSOLE_VERSION}.${GOOS}.${GOARCH}.zip
            wget -T10 -t3 ${POLARIS_GIT_PATH}/polaris-console/releases/download/${CONSOLE_VERSION}/${CONSOLE_PKG_NAME} --no-check-certificate
            LIMITER_PKG_NAME=polaris-limiter-release_${CONSOLE_VERSION}.${GOOS}.${GOARCH}.zip
            wget -T10 -t3 ${POLARIS_GIT_PATH}/polaris-limiter/releases/download/${LIMITER_VERSION}/${LIMITER_PKG_NAME} --no-check-certificate
            if [ ${GOOS} == "windows" ];then
              wget -T10 -t3 https://github.com/prometheus/prometheus/releases/download/v2.28.0/prometheus-2.28.0.${GOOS}-${GOARCH}.zip
              mv ../vm/install-windows.bat ./install.bat
              mv ../vm/install-windows.ps1 ./install-windows.ps1
              mv ../vm/uninstall-windows.bat ./uninstall.bat
              mv ../vm/uninstall-windows.ps1 ./uninstall-windows.ps1
              mv ../vm/port.properties ./port.properties
            else
              wget -T10 -t3 https://github.com/prometheus/prometheus/releases/download/v2.28.0/prometheus-2.28.0.${GOOS}-${GOARCH}.tar.gz
              mv ../vm/install-${GOOS}.sh ./install.sh
              mv ../vm/uninstall-${GOOS}.sh ./uninstall.sh
              mv ../vm/port.properties ./port.properties
              mv ../vm/prometheus-help.sh ./prometheus-help.sh
            fi
            popd
          fi
          PACKAGE_NAME=${DIR_NAME}.zip
          zip -r ${PACKAGE_NAME} ${DIR_NAME}
          mv ${PACKAGE_NAME} ../../
          echo ::set-output name=name::${PACKAGE_NAME}

      - name: Get Release by Tag
        id: get_release_by_tag
        uses: jonfriesen/get-release-by-tag@v0.0.11
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.server_version }}

      - name: Upload asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_by_tag.outputs.upload_url }}
          asset_path: ./${{ steps.build.outputs.name }}
          asset_name: ${{ steps.build.outputs.name }}
          asset_content_type: application/gzip
